input {
  tcp {
    port => 4999
  }
}

filter {
  ruby {
    code => "event['time'] = event.timestamp.time.localtime.strftime('%Y-%m-%d')"
  }
  grok {
    patterns_dir => "./patterns"
    match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{NUMBER:userid}%{SPACE}%{NUMBER:counter}%{SPACE}%{NUMBER:clusterid}%{SPACE}%{WORD:uuid}%{SPACE}%{IP:ip}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{NOTSPACE:typename}%{SPACE}%{NOTSPACE:taskid}%{SPACE}%{NOTSPACE:ports} %{GREEDYDATA:msg}" }
    add_field => {
      "ipport" => "%{ip}:%{ports}"
    }
    remove_field => [ "message", "ports"]
  }

  if "_grokparsefailure" in [tags] and [message] =~ /{/ {
    json {
      source => "message"
      add_field => {
        "ipport" => "%{ip}:%{ports}"
      }
      remove_field => ["message", "ports"]
      remove_tag => ["_grokparsefailure", "_jsonparsefailure"]
    }
  }
}

output {
  #stdout { codec => rubydebug }
  if "_jsonparsefailure" not in [tags] and "_grokparsefailure" not in [tags] and [msg] =~ /^.+/ {
    if ([platform] == "app" or [platform] == "component") {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "logstash-%{platform}-%{userid}-%{time}"
        document_type => "logstash-%{clusterid}-%{typename}"
        template => "/etc/logstash/conf.d/logstash-2.1.0.json"
        template_name => "logstash"
        template_overwrite => "true"
      }
    } else {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "logstash-%{userid}-%{time}"
        document_type => "logstash-%{clusterid}-%{typename}"
        template => "/etc/logstash/conf.d/logstash-2.1.0.json"
        template_name => "logstash"
        template_overwrite => "true"
      }
    }
  }
}

output {
  stdout { codec => rubydebug }
  elasticsearch {
    hosts => ["10.3.20.54:9200"]
    index => "logstash-test"
    document_type => "logstash-test"
    template => "/etc/logstash/conf.d/logstash-2.1.0.json"
    template_name => "logstash"
    template_overwrite => "true"
  }
}
